use std::{error::Error, fmt};

use ash::vk;

#[derive(Clone, Debug)]
pub enum VulkanError {
    Success = 0,
    NotReady = 1,
    Timeout = 2,
    EventSet = 3,
    EventReset = 4,
    Incomplete = 5,
    ErrorOutOfHostMemory = -1,
    ErrorOutOfDeviceMemory = -2,
    ErrorInitializationFailed = -3,
    ErrorDeviceLost = -4,
    ErrorMemoryMapFailed = -5,
    ErrorLayerNotPresent = -6,
    ErrorExtensionNotPresent = -7,
    ErrorFeatureNotPresent = -8,
    ErrorIncompatibleDriver = -9,
    ErrorTooManyObjects = -10,
    ErrorFormatNotSupported = -11,
    ErrorFragmentedPool = -12,
    ErrorUnknown = -13,
    ErrorOutOfPoolMemory = -1000069000,
    ErrorInvalidExternalHandle = -1000072003,
    ErrorFragmentation = -1000161000,
    ErrorInvalidOpaqueCaptureAddress = -1000257000,
    PipelineCompileRequired = 1000297000,
    ErrorNotPermitted = -1000174001,
    ErrorSurfaceLost = -1000000000,
    ErrorNativeWindowInUse = -1000000001,
    Suboptimal = 1000001003,
    ErrorOutOfDate = -1000001004,
    ErrorIncompatibleDisplay = -1000003001,
    ErrorValidationFailed = -1000011001,
    ErrorInvalidShader = -1000012000,
    ErrorImageUsageNotSupported = -1000023000,
    ErrorVideoPictureLayoutNotSupported = -1000023001,
    ErrorVideoProfileOperationNotSupported = -1000023002,
    ErrorVideoProfileFormatNotSupported = -1000023003,
    ErrorVideoProfileCodecNotSupported = -1000023004,
    ErrorVideoStdVersionNotSupported = -1000023005,
    ErrorInvalidDrmFormatModifierPlaneLayout = -1000158000,
    ErrorFullScreenExclusiveModeLost = -1000255000,
    ThreadIdle = 1000268000,
    ThreadDone = 1000268001,
    OperationDeferred = 1000268002,
    OperationNotDeferred = 1000268003,
    ErrorInvalidVideoStdParameters = -1000299000,
    ErrorCompressionExhausted = -1000338000,
    IncompatibleShaderBinary = 1000482000,
    PipelineBinaryMissing = 1000483000,
    ErrorNotEnoughSpace = -1000483000,
}

impl From<vk::Result> for VulkanError {
    fn from(value: vk::Result) -> Self {
        match value.as_raw() {
            0 => Self::Success,
            1 => Self::NotReady,
            2 => Self::Timeout,
            3 => Self::EventSet,
            4 => Self::EventReset,
            5 => Self::Incomplete,
            -1 => Self::ErrorOutOfHostMemory,
            -2 => Self::ErrorOutOfDeviceMemory,
            -3 => Self::ErrorInitializationFailed,
            -4 => Self::ErrorDeviceLost,
            -5 => Self::ErrorMemoryMapFailed,
            -6 => Self::ErrorLayerNotPresent,
            -7 => Self::ErrorExtensionNotPresent,
            -8 => Self::ErrorFeatureNotPresent,
            -9 => Self::ErrorIncompatibleDriver,
            -10 => Self::ErrorTooManyObjects,
            -11 => Self::ErrorFormatNotSupported,
            -12 => Self::ErrorFragmentedPool,
            -13 => Self::ErrorUnknown,
            -1000069000 => Self::ErrorOutOfPoolMemory,
            -1000072003 => Self::ErrorInvalidExternalHandle,
            -1000161000 => Self::ErrorFragmentation,
            -1000257000 => Self::ErrorInvalidOpaqueCaptureAddress,
            1000297000 => Self::PipelineCompileRequired,
            -1000174001 => Self::ErrorNotPermitted,
            -1000000000 => Self::ErrorSurfaceLost,
            -1000000001 => Self::ErrorNativeWindowInUse,
            1000001003 => Self::Suboptimal,
            -1000001004 => Self::ErrorOutOfDate,
            -1000003001 => Self::ErrorIncompatibleDisplay,
            -1000011001 => Self::ErrorValidationFailed,
            -1000012000 => Self::ErrorInvalidShader,
            -1000023000 => Self::ErrorImageUsageNotSupported,
            -1000023001 => Self::ErrorVideoPictureLayoutNotSupported,
            -1000023002 => Self::ErrorVideoProfileOperationNotSupported,
            -1000023003 => Self::ErrorVideoProfileFormatNotSupported,
            -1000023004 => Self::ErrorVideoProfileCodecNotSupported,
            -1000023005 => Self::ErrorVideoStdVersionNotSupported,
            -1000158000 => Self::ErrorInvalidDrmFormatModifierPlaneLayout,
            -1000255000 => Self::ErrorFullScreenExclusiveModeLost,
            1000268000 => Self::ThreadIdle,
            1000268001 => Self::ThreadDone,
            1000268002 => Self::OperationDeferred,
            1000268003 => Self::OperationNotDeferred,
            -1000299000 => Self::ErrorInvalidVideoStdParameters,
            -1000338000 => Self::ErrorCompressionExhausted,
            1000482000 => Self::IncompatibleShaderBinary,
            1000483000 => Self::PipelineBinaryMissing,
            -1000483000 => Self::ErrorNotEnoughSpace,
            _ => Self::ErrorUnknown,
        }
    }
}

impl fmt::Display for VulkanError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "Vulkan error: {:?}", self)
    }
}

impl Error for VulkanError {}
