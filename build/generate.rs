use std::io::{self, prelude::*};

pub fn generate_flags(
    file: &mut impl Write,
    name: &str,
    prefix: &str,
    input: &'static str,
) -> Result<(), io::Error> {
    let mut flags = Vec::new();

    for line in input.lines() {
        if line.trim().starts_with("//")
            || line.trim().starts_with("typedef")
            || line.trim().starts_with("}")
            || line.trim().is_empty()
        {
            continue;
        }

        let mut parts = line.split_whitespace();

        let name = parts.next().unwrap();
        let _ = parts.next().unwrap(); // skip the '=' part
        let value = parts.next().unwrap().strip_suffix(',').unwrap();

        if !value.chars().take(1).all(|c| c.is_ascii_digit()) {
            continue; // skip non-numeric values
        }

        let name = name.strip_prefix(prefix).unwrap_or(name);
        let name = name.strip_suffix("_KHR").unwrap_or(name);
        let name = name.strip_suffix("_EXT").unwrap_or(name);
        let name = name.strip_suffix("_AMD").unwrap_or(name);
        let name = name.strip_suffix("_NV").unwrap_or(name);
        let name = name.strip_suffix("_BIT").unwrap_or(name);

        flags.push((name, value));
    }

    writeln!(file, "// This file is generated by build.rs")?;
    writeln!(file)?;
    writeln!(file, "bitflags::bitflags! {{")?;
    #[rustfmt::skip]
    writeln!(file, "    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]")?;
    writeln!(file, "    pub struct {name}: u32 {{")?;

    for (rust_name, value) in &flags {
        writeln!(file, "        const {rust_name} = {value};")?;
    }

    writeln!(file, "    }}")?;
    writeln!(file, "}}")?;

    Ok(())
}

pub fn generate_enum(
    file: &mut impl Write,
    name: &str,
    prefix: &str,
    input: &'static str,
) -> Result<(), io::Error> {
    let mut formats = Vec::new();

    for line in input.lines() {
        if line.trim().starts_with("//")
            || line.trim().starts_with("typedef")
            || line.trim().starts_with("}")
            || line.trim().is_empty()
        {
            continue;
        }

        let mut parts = line.split_whitespace();

        let name = parts.next().unwrap();
        let _ = parts.next().unwrap(); // skip the '=' part
        let value = parts.next().unwrap().strip_suffix(',').unwrap();

        if !value.chars().take(1).all(|c| c.is_ascii_digit()) {
            continue; // skip non-numeric values
        }

        let name = name.strip_prefix(prefix).unwrap_or(name);
        let name = name.strip_suffix("_KHR").unwrap_or(name);
        let name = name.strip_suffix("_EXT").unwrap_or(name);
        let name = name.strip_suffix("_AMD").unwrap_or(name);
        let name = name.strip_suffix("_NV").unwrap_or(name);
        let name = name.strip_suffix("_BIT").unwrap_or(name);

        let mut rust_name = String::new();
        let mut needs_upper = true;
        for c in name.chars() {
            if c == '_' {
                needs_upper = true;
                continue;
            }

            match needs_upper {
                false => rust_name.push(c.to_ascii_lowercase()),
                true => {
                    rust_name.push(c.to_ascii_uppercase());
                    needs_upper = false;
                }
            }

            if c.is_ascii_digit() {
                needs_upper = true;
            }
        }

        formats.push((rust_name, value));
    }

    writeln!(file, "// This file is generated by build.rs")?;
    writeln!(file)?;
    writeln!(file, "#[repr(i32)]")?;
    writeln!(file, "#[derive(Clone, Copy, Debug, PartialEq, Eq)]")?;
    writeln!(file, "pub enum {name} {{")?;

    for (name, value) in &formats {
        writeln!(file, "    {name} = {value},")?;
    }

    writeln!(file, "}}")?;
    writeln!(file)?;
    writeln!(file, "impl {name} {{")?;
    writeln!(file, "    pub fn from_raw(value: i32) -> Option<Self> {{")?;
    writeln!(file, "        match value {{")?;

    for (name, value) in &formats {
        writeln!(file, "            {value} => Some(Self::{name}),")?;
    }

    writeln!(file, "            _ => None,")?;
    writeln!(file, "        }}")?;
    writeln!(file, "    }}")?;
    writeln!(file)?;
    writeln!(file, "    pub fn as_raw(self) -> i32 {{")?;
    writeln!(file, "        self as i32")?;
    writeln!(file, "    }}")?;
    writeln!(file, "}}")?;

    Ok(())
}
